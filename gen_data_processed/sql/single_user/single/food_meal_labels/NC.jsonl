{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_56279 eat most frequently within one week, starting from 2022-05-22?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_56279 eat most frequently within one week, starting from 2022-05-22?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Beverages"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_62344 eat most frequently within one week, starting from 2022-05-31?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_62344 eat most frequently within one week, starting from 2022-05-31?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_22643 eat most frequently within one week, starting from 2022-06-04?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_22643 eat most frequently within one week, starting from 2022-06-04?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_84534 eat most frequently within one week, starting from 2022-05-28?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_84534 eat most frequently within one week, starting from 2022-05-28?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_56297 eat most frequently within one week, starting from 2022-05-19?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_56297 eat most frequently within one week, starting from 2022-05-19?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_34415 eat most frequently within one week, starting from 2022-06-12?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_34415 eat most frequently within one week, starting from 2022-06-12?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_80622 eat most frequently within one week, starting from 2022-05-18?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_80622 eat most frequently within one week, starting from 2022-05-18?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_62344 eat most frequently within one week, starting from 2022-05-27?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_62344 eat most frequently within one week, starting from 2022-05-27?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_33497 eat most frequently within one week, starting from 2022-05-29?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_33497 eat most frequently within one week, starting from 2022-05-29?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_10021 eat most frequently within one week, starting from 2022-06-09?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_10021 eat most frequently within one week, starting from 2022-06-09?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Cereals and Legumes"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_96181 eat most frequently within one week, starting from 2022-06-03?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_96181 eat most frequently within one week, starting from 2022-06-03?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Cereals and Legumes"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_84740 eat most frequently within one week, starting from 2022-05-25?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_84740 eat most frequently within one week, starting from 2022-05-25?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_17705 eat most frequently within one week, starting from 2022-05-26?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_17705 eat most frequently within one week, starting from 2022-05-26?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_29474 eat most frequently within one week, starting from 2022-06-09?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_29474 eat most frequently within one week, starting from 2022-06-09?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_56718 eat most frequently within one week, starting from 2022-05-24?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_56718 eat most frequently within one week, starting from 2022-05-24?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_79824 eat most frequently within one week, starting from 2022-06-05?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_79824 eat most frequently within one week, starting from 2022-06-05?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_29474 eat most frequently within one week, starting from 2022-06-09?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_29474 eat most frequently within one week, starting from 2022-06-09?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_77391 eat most frequently within one week, starting from 2022-05-21?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_77391 eat most frequently within one week, starting from 2022-05-21?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_22119 eat most frequently within one week, starting from 2022-05-20?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_22119 eat most frequently within one week, starting from 2022-05-20?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Protein Sources"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_92332 eat most frequently within one week, starting from 2022-06-16?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_92332 eat most frequently within one week, starting from 2022-06-16?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_82994 eat most frequently within one week, starting from 2022-06-11?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_82994 eat most frequently within one week, starting from 2022-06-11?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Beverages"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_65060 eat most frequently within one week, starting from 2022-05-20?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_65060 eat most frequently within one week, starting from 2022-05-20?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_39976 eat most frequently within one week, starting from 2022-06-10?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_39976 eat most frequently within one week, starting from 2022-06-10?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_67598 eat most frequently within one week, starting from 2022-05-21?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_67598 eat most frequently within one week, starting from 2022-05-21?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_35752 eat most frequently within one week, starting from 2022-06-04?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_35752 eat most frequently within one week, starting from 2022-06-04?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Beverages"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_89897 eat most frequently within one week, starting from 2022-05-24?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_89897 eat most frequently within one week, starting from 2022-05-24?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_67598 eat most frequently within one week, starting from 2022-05-19?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_67598 eat most frequently within one week, starting from 2022-05-19?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_94336 eat most frequently within one week, starting from 2022-05-20?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_94336 eat most frequently within one week, starting from 2022-05-20?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_28689 eat most frequently within one week, starting from 2022-05-25?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_28689 eat most frequently within one week, starting from 2022-05-25?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich category of food did A4F_22119 eat most frequently within one week, starting from 2022-05-19?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which category of food did A4F_22119 eat most frequently within one week, starting from 2022-05-19?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_91594 eat most frequently on 2022-06-03?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_91594 eat most frequently on 2022-06-03?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Bread"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_18098 eat most frequently on 2022-06-05?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_18098 eat most frequently on 2022-06-05?\nOutput requirement: return 1 value(s); types (ordered): {else}", "Answer": "Infusions (Coffee and Others)"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_56355 eat most frequently on 2022-05-27?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_56355 eat most frequently on 2022-05-27?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_31033 eat most frequently on 2022-06-15?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_31033 eat most frequently on 2022-06-15?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Water"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_24211 eat most frequently on 2022-06-10?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_24211 eat most frequently on 2022-06-10?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Greens"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_86472 eat most frequently on 2022-06-11?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_86472 eat most frequently on 2022-06-11?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Alcoholic Beverages"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_20573 eat most frequently on 2022-06-05?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_20573 eat most frequently on 2022-06-05?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Greens"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_97618 eat most frequently on 2022-06-18?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_97618 eat most frequently on 2022-06-18?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Cheeses"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_76957 eat most frequently on 2022-05-19?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_76957 eat most frequently on 2022-05-19?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_94601 eat most frequently on 2022-05-24?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_94601 eat most frequently on 2022-05-24?\nOutput requirement: return 1 value(s); types (ordered): {else}", "Answer": "Infusions (Coffee and Others)"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_41207 eat most frequently on 2022-06-12?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_41207 eat most frequently on 2022-06-12?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Other Meats"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_31033 eat most frequently on 2022-06-13?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_31033 eat most frequently on 2022-06-13?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Water"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_32988 eat most frequently on 2022-05-31?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_32988 eat most frequently on 2022-05-31?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Vegetables and Greens"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_32988 eat most frequently on 2022-05-23?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_32988 eat most frequently on 2022-05-23?\nOutput requirement: return 1 value(s); types (ordered): {else}", "Answer": "Infusions (Coffee and Others)"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_56279 eat most frequently on 2022-05-29?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_56279 eat most frequently on 2022-05-29?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fish"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_40008 eat most frequently on 2022-06-02?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_40008 eat most frequently on 2022-06-02?\nOutput requirement: return 1 value(s); types (ordered): {else}", "Answer": "Infusions (Coffee and Others)"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_65695 eat most frequently on 2022-05-19?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_65695 eat most frequently on 2022-05-19?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_92332 eat most frequently on 2022-06-17?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_92332 eat most frequently on 2022-06-17?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Bread"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_72388 eat most frequently on 2022-06-22?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_72388 eat most frequently on 2022-06-22?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Eggs"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_65695 eat most frequently on 2022-05-27?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_65695 eat most frequently on 2022-05-27?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_22119 eat most frequently on 2022-05-24?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_22119 eat most frequently on 2022-05-24?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fish"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_27766 eat most frequently on 2022-06-15?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_27766 eat most frequently on 2022-06-15?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Bread"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_60983 eat most frequently on 2022-05-31?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_60983 eat most frequently on 2022-05-31?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_95200 eat most frequently on 2022-06-07?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_95200 eat most frequently on 2022-06-07?\nOutput requirement: return 1 value(s); types (ordered): {else}", "Answer": "Avocado/Fatty Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_22643 eat most frequently on 2022-06-05?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_22643 eat most frequently on 2022-06-05?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_97618 eat most frequently on 2022-06-03?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_97618 eat most frequently on 2022-06-03?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Bread"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_99000 eat most frequently on 2022-06-10?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_99000 eat most frequently on 2022-06-10?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fruits"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_56355 eat most frequently on 2022-05-25?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_56355 eat most frequently on 2022-05-25?\nOutput requirement: return 1 value(s); types (ordered): {else}", "Answer": "Infusions (Coffee and Others)"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_17419 eat most frequently on 2022-06-14?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_17419 eat most frequently on 2022-06-14?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fish"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich subcategory of food did A4F_76068 eat most frequently on 2022-05-30?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which subcategory of food did A4F_76068 eat most frequently on 2022-05-30?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Bread"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_82994 within one week, starting from 2022-06-11: Fresh or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_82994 within one week, starting from 2022-06-11: Fresh or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_35752 within one week, starting from 2022-06-05: Oven-Baked or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_35752 within one week, starting from 2022-06-05: Oven-Baked or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Oven-Baked"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_65724 within one week, starting from 2022-05-30: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_65724 within one week, starting from 2022-05-30: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_56718 within one week, starting from 2022-05-19: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_56718 within one week, starting from 2022-05-19: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_35752 within one week, starting from 2022-06-03: Boiled or Steamed or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_35752 within one week, starting from 2022-06-03: Boiled or Steamed or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Boiled or Steamed"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_92332 within one week, starting from 2022-06-07: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_92332 within one week, starting from 2022-06-07: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_76292 within one week, starting from 2022-05-19: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_76292 within one week, starting from 2022-05-19: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_29474 within one week, starting from 2022-06-03: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_29474 within one week, starting from 2022-06-03: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_25413 within one week, starting from 2022-06-09: Fresh or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_25413 within one week, starting from 2022-06-09: Fresh or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_84534 within one week, starting from 2022-05-24: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_84534 within one week, starting from 2022-05-24: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_91516 within one week, starting from 2022-05-24: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_91516 within one week, starting from 2022-05-24: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_94336 within one week, starting from 2022-05-25: Fresh or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_94336 within one week, starting from 2022-05-25: Fresh or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_10021 within one week, starting from 2022-06-08: Fried or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_10021 within one week, starting from 2022-06-08: Fried or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fried"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_98040 within one week, starting from 2022-06-12: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_98040 within one week, starting from 2022-06-12: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_74720 within one week, starting from 2022-06-10: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_74720 within one week, starting from 2022-06-10: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_56279 within one week, starting from 2022-05-22: Fresh or Fermented?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_56279 within one week, starting from 2022-05-22: Fresh or Fermented?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_82994 within one week, starting from 2022-06-13: Fresh or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_82994 within one week, starting from 2022-06-13: Fresh or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_72388 within one week, starting from 2022-06-13: Fresh or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_72388 within one week, starting from 2022-06-13: Fresh or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_56355 within one week, starting from 2022-05-25: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_56355 within one week, starting from 2022-05-25: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_22483 within one week, starting from 2022-06-09: Fresh or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_22483 within one week, starting from 2022-06-09: Fresh or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_94120 within one week, starting from 2022-06-04: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_94120 within one week, starting from 2022-06-04: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_43794 within one week, starting from 2022-05-28: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_43794 within one week, starting from 2022-05-28: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_56297 within one week, starting from 2022-05-25: Fresh or Grilled?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_56297 within one week, starting from 2022-05-25: Fresh or Grilled?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_20573 within one week, starting from 2022-06-01: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_20573 within one week, starting from 2022-06-01: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_71665 within one week, starting from 2022-06-11: Boiled or Steamed or Fresh?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_71665 within one week, starting from 2022-06-11: Boiled or Steamed or Fresh?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Boiled or Steamed"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_49219 within one week, starting from 2022-05-20: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_49219 within one week, starting from 2022-05-20: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_25413 within one week, starting from 2022-06-07: Fresh or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_25413 within one week, starting from 2022-06-07: Fresh or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_79824 within one week, starting from 2022-06-02: Preserved (Canned or Jarred) or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_79824 within one week, starting from 2022-06-02: Preserved (Canned or Jarred) or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {else}", "Answer": "Preserved (Canned or Jarred)"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_44160 within one week, starting from 2022-05-21: Fresh or Oven-Baked?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_44160 within one week, starting from 2022-05-21: Fresh or Oven-Baked?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
{"Query_sql": "Given the following MySQL table schema, write ONE SELECT statement to compute the data you need. Use DATE(ts) for date filtering if needed. Output SQL only.\n\nQuestion:\nWhich cooking style was used more often by A4F_32988 within one week, starting from 2022-05-24: Fresh or Boiled or Steamed?\n\nSchema (DDL):\n```sql\nCREATE TABLE `food_meal_labels` (\n  `id`            VARCHAR(20)   NOT NULL,\n  `ts`            DATETIME      NOT NULL,\n  `image_id`      VARCHAR(100)  NOT NULL,\n  `category`      VARCHAR(128)  NOT NULL,\n  `subcategory`   VARCHAR(128)  NOT NULL,\n  `cooking_style` VARCHAR(128)  NOT NULL,\n  PRIMARY KEY (`id`,`ts`,`image_id`,`category`,`subcategory`,`cooking_style`),\n  KEY `idx_id_ts` (`id`,`ts`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n-- IMPORTANT aggregation note (for SQL tasks):\n--   * Deduplicate within a meal: treat duplicates within the same (id, ts, label) as one.\n--   * For \"times\" counts across a day/week, count distinct meals (ts) that include the label.\n--     A common pattern: COUNT(DISTINCT CASE WHEN <label predicate> THEN CONCAT(id,'#',ts) END)\n-- Use DATE(ts) for day filtering and 7-day windows.\n\n```", "Query_base": "You will be given the SQL result for the question. Answer the question based on the SQL result, do not include explanations. \nQuestion: Which cooking style was used more often by A4F_32988 within one week, starting from 2022-05-24: Fresh or Boiled or Steamed?\nOutput requirement: return 1 value(s); types (ordered): {word}", "Answer": "Fresh"}
